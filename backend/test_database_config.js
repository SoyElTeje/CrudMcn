/**
 * Test para verificar la configuraci√≥n optimizada de base de datos
 * Verifica conexi√≥n, pools, retry logic y monitoreo
 */

const { databaseConfig, sql } = require("./config/database");
const logger = require("./config/logger");

async function testDatabaseConfig() {
  console.log("üß™ Iniciando tests de configuraci√≥n de base de datos...\n");

  try {
    // Test 1: Verificar configuraci√≥n del pool
    console.log("1Ô∏è‚É£ Test: Configuraci√≥n del pool");
    const poolConfig = databaseConfig.getPoolConfig();
    console.log("‚úÖ Configuraci√≥n del pool obtenida:", {
      environment: process.env.NODE_ENV || "development",
      maxConnections: poolConfig.pool.max,
      minConnections: poolConfig.pool.min,
      idleTimeout: poolConfig.pool.idleTimeoutMillis,
    });

    // Test 2: Crear conexi√≥n a base de datos principal
    console.log("\n2Ô∏è‚É£ Test: Conexi√≥n a base de datos principal");
    const mainPool = await databaseConfig.getPool();
    console.log("‚úÖ Conexi√≥n principal establecida");

    // Test 3: Verificar que el pool est√° conectado
    console.log("\n3Ô∏è‚É£ Test: Estado del pool");
    console.log("‚úÖ Pool conectado:", mainPool.connected);
    console.log("‚úÖ Total de conexiones:", mainPool.totalConnections);

    // Test 4: Ejecutar query de prueba
    console.log("\n4Ô∏è‚É£ Test: Query de prueba");
    const request = mainPool.request();
    const result = await request.query("SELECT GETDATE() as current_time, @@VERSION as version");
    console.log("‚úÖ Query ejecutada exitosamente");
    console.log("   Hora actual:", result.recordset[0].current_time);
    console.log("   Versi√≥n SQL Server:", result.recordset[0].version.split("\n")[0]);

    // Test 5: Obtener estad√≠sticas de pools
    console.log("\n5Ô∏è‚É£ Test: Estad√≠sticas de pools");
    const stats = databaseConfig.getPoolStats();
    console.log("‚úÖ Estad√≠sticas obtenidas:", stats);

    // Test 6: Crear conexi√≥n a base de datos secundaria (si existe)
    console.log("\n6Ô∏è‚É£ Test: Conexi√≥n a base de datos secundaria");
    try {
      const secondaryPool = await databaseConfig.getPool("BI_EDITOR");
      console.log("‚úÖ Conexi√≥n secundaria establecida");
      
      // Verificar estad√≠sticas con m√∫ltiples pools
      const multiStats = databaseConfig.getPoolStats();
      console.log("‚úÖ Estad√≠sticas con m√∫ltiples pools:", Object.keys(multiStats));
    } catch (error) {
      console.log("‚ö†Ô∏è Base de datos secundaria no disponible:", error.message);
    }

    // Test 7: Verificar retry logic (simulando error)
    console.log("\n7Ô∏è‚É£ Test: Retry logic");
    try {
      // Intentar conectar a una base de datos inexistente
      await databaseConfig.getPool("DATABASE_INEXISTENTE");
    } catch (error) {
      console.log("‚úÖ Retry logic funcionando - Error esperado:", error.message);
    }

    // Test 8: Verificar cierre graceful
    console.log("\n8Ô∏è‚É£ Test: Cierre graceful");
    await databaseConfig.closeAllPools();
    console.log("‚úÖ Todos los pools cerrados exitosamente");

    console.log("\nüéâ Todos los tests pasaron exitosamente!");
    console.log("\nüìä Resumen de la configuraci√≥n optimizada:");
    console.log("   - Pool de conexiones configurado por ambiente");
    console.log("   - Retry logic implementado");
    console.log("   - Monitoreo de pools activo");
    console.log("   - Cierre graceful funcionando");
    console.log("   - Logging estructurado implementado");

  } catch (error) {
    console.error("‚ùå Error en tests:", error.message);
    console.error("Stack trace:", error.stack);
    process.exit(1);
  }
}

// Ejecutar tests si se llama directamente
if (require.main === module) {
  testDatabaseConfig()
    .then(() => {
      console.log("\n‚úÖ Tests completados exitosamente");
      process.exit(0);
    })
    .catch((error) => {
      console.error("\n‚ùå Tests fallaron:", error.message);
      process.exit(1);
    });
}

module.exports = { testDatabaseConfig };
