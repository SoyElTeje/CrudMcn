const authService = require("./services/authService");

console.log("üîç Debuggeando problema de token inv√°lido...\n");

// Funci√≥n para verificar un token espec√≠fico
function verifySpecificToken(token) {
  console.log("üîë Verificando token:", token.substring(0, 50) + "...");

  try {
    const decoded = authService.verifyToken(token);
    if (decoded) {
      console.log("‚úÖ Token v√°lido");
      console.log("üìã Datos decodificados:", decoded);
      return true;
    } else {
      console.log("‚ùå Token inv√°lido");
      return false;
    }
  } catch (error) {
    console.log("‚ùå Error verificando token:", error.message);
    return false;
  }
}

// Generar un token v√°lido para comparar
console.log("üîß Generando token v√°lido para comparaci√≥n...");
const validUser = {
  id: 1,
  username: "admin",
  isAdmin: true,
};
const validToken = authService.generateToken(validUser);
console.log("‚úÖ Token v√°lido generado:", validToken.substring(0, 50) + "...");

// Verificar el token v√°lido
console.log("\nüîç Verificando token v√°lido...");
verifySpecificToken(validToken);

// Probar con diferentes tipos de tokens inv√°lidos
console.log("\nüß™ Probando tokens inv√°lidos...");

// Token vac√≠o
console.log("\n1. Token vac√≠o:");
verifySpecificToken("");

// Token malformado
console.log("\n2. Token malformado:");
verifySpecificToken("invalid.token.here");

// Token con formato correcto pero firma incorrecta
console.log("\n3. Token con formato correcto pero firma incorrecta:");
const malformedToken =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MSwidXNlcm5hbWUiOiJhZG1pbiIsImlzQWRtaW4iOnRydWV9.invalid_signature";
verifySpecificToken(malformedToken);

// Token expirado (simular)
console.log("\n4. Verificando configuraci√≥n de JWT_SECRET...");
console.log("üîç JWT_SECRET configurado:", process.env.JWT_SECRET ? "S√ç" : "NO");
console.log(
  "üîç Valor de JWT_SECRET:",
  process.env.JWT_SECRET || "NO CONFIGURADO"
);

console.log("\n‚úÖ Debug completado");
